{"version":3,"file":"static/webpack/static/development/pages/index.js.acba6fa2f31106d4735f.hot-update.js","sources":["webpack:///./src/features/country/CountryDb.tsx"],"sourcesContent":["import React, { FC, useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { createDbUrl, connectDb } from '../../sql/connection/connection';\nimport Country from '../../sql/entities/Country';\nimport countryAdapter from './countryEntity';\nimport { GlobalCountryState } from './countrySlice';\n\nconst { selectAll: selectCountries } = countryAdapter.getSelectors(\n  (state: GlobalCountryState) => state.country\n);\n\nconst CountryDb: FC = () => {\n  const [dbUrl, setDbUrl] = useState('');\n\n  const handleButtonClick = async () => {\n    setDbUrl(await createDbUrl({}));\n  };\n\n  const countries = useSelector(selectCountries) || [];\n\n  useEffect(() => {\n    const main = async () => {\n      if (!countries.length) {\n        return;\n      }\n      const countriesCopy = countries.map((value) => ({\n        ...value,\n      }));\n      const connection = await connectDb({});\n      await connection.sqljsManager\n        .createQueryBuilder()\n        .insert()\n        .into(Country)\n        .values(countriesCopy)\n        .execute();\n      connection.sqljsManager.saveDatabase();\n      connection.close();\n    };\n\n    main();\n  }, [countries]);\n\n  return (\n    <div>\n      <button type=\"button\" onClick={handleButtonClick}>\n        Create a db\n      </button>\n      {dbUrl && (\n        <a href={dbUrl} download=\"db.sqlite\">\n          db_link\n        </a>\n      )}\n      <br />\n    </div>\n  );\n};\n\nexport default CountryDb;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAAA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AAAA;AAAA;AAJA;AAAA;AACA;AADA;AAOA;AAPA;AAAA;AACA;AADA;AAcA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}