{"version":3,"file":"static/webpack/static/development/pages/index.js.c61ebdba76827be1b64a.hot-update.js","sources":["webpack:///./src/pages/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GetStaticProps, NextPage } from 'next';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport ManifestHead from '../features/head/ManifestHead';\nimport countryAdapter, { Country } from '../features/country/countryEntity';\nimport CountryDiv from '../features/country/CountryDiv';\nimport { GlobalCountryState } from '../features/country/countrySlice';\n\nexport interface StaticProps {\n  countries: Country[];\n}\n\nconst { selectEntities: selectCountries } = countryAdapter.getSelectors(\n  (state: GlobalCountryState) => state.country || {}\n);\n\nconst IndexPage: NextPage<StaticProps> = ({ countries }) => {\n  const [currentIp, setIp] = useState('');\n  const [curerentISO2, setISO2] = useState('');\n\n  useEffect(() => {\n    const main = async () => {\n      const ipData = await axios.get(\n        'https://api.kwelo.com/v1/network/ip-address/my'\n      );\n      console.log(ipData);\n      const ip = ipData?.data?.ip_address || '';\n      setIp(ip);\n      const { data } = await axios.get(\n        `https://api.kwelo.com/v1/network/ip-address/location/${ip}`\n      );\n      console.log(data);\n      setISO2(data?.data?.geolocation?.country?.iso_code || '');\n    };\n\n    main();\n  }, []);\n\n  const countryObj = useSelector(selectCountries) || {};\n  return (\n    <div>\n      <ManifestHead title={process.env.FOLDER} hrefCanonical=\"/\" />\n      <p>{`Your Ip: ${currentIp}`}</p>\n      <p>{`Your country: ${countryObj[curerentISO2]?.Country ?? ''}`}</p>\n      <p>Powered by Kwelo.com and covid19api.com</p>\n      <CountryDiv countries={countries} />\n    </div>\n  );\n};\n\nexport const getStaticProps: GetStaticProps<StaticProps> = async () => {\n  const countries = (\n    await axios.get('https://api.covid19api.com/countries').catch((err) => {\n      console.log(err);\n      return { data: [] };\n    })\n  ).data as Country[];\n  return {\n    props: {\n      countries,\n    },\n  } as { props: StaticProps };\n};\n\nexport default IndexPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;;;AAOA;AACA;AAAA;AADA;AACA;AAGA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AANA;AAAA;AACA;AADA;AAAA;AAOA;AAGA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;AAeA;;;;A","sourceRoot":""}