{"version":3,"file":"static/webpack/static/development/pages/index.js.f39eac7c4adb4ef84e2b.hot-update.js","sources":["webpack:///./src/sql/connection/connection.ts"],"sourcesContent":["import {\n  getConnection,\n  Connection,\n  getConnectionManager,\n  EntitySchema,\n} from 'typeorm/browser';\nimport { Country } from '../entities/Country';\n\nconst isProd = process.env.ENV === 'production';\nconst defaultConnectionName = 'sqlJsDb';\nexport const defaultEntities = [Country];\n\n// either copy the file sql-wasm.wasm from sql.js/dist\n// or define locateFile function to retrieve it from a cdn\nconst locateFile = (filename: string) =>\n  `https://cdnjs.cloudflare.com/ajax/libs/sql.js/${process.env.SQL_JS_VERSION}/dist/${filename}`;\n\ninterface DbNameOption {\n  name?: string;\n}\n\ninterface DbConnectionOption extends DbNameOption {\n  entities?: (Function | string | EntitySchema<any>)[];\n}\n\ninterface DbLoadingOption extends DbConnectionOption {\n  database: Uint8Array;\n}\n\nexport const connectDb = async ({\n  name = defaultConnectionName,\n  entities = defaultEntities,\n}: DbConnectionOption) => {\n  let connection: Connection;\n  try {\n    connection = getConnection(name);\n  } catch (error) {\n    const data = await window.localforage?.getItem<string>(name);\n    if (data) {\n      await window.localforage?.removeItem(name);\n    }\n    connection = getConnectionManager().create({\n      type: 'sqljs',\n      sqlJsConfig: { locateFile },\n      name,\n      location: name,\n      autoSave: true,\n      entities,\n      useLocalForage: true,\n      logging: !isProd && ['query', 'schema'],\n    });\n    await connection.connect();\n    if (data) {\n      connection.sqljsManager.loadDatabase(JSON.parse(data));\n    }\n  }\n  if (!connection.isConnected) {\n    await connection.connect();\n  }\n  return connection;\n};\n\nexport const closeDb = ({ name = defaultConnectionName }: DbNameOption) => {\n  const connection = getConnection(name);\n  return connection.close();\n};\n\nexport const removeDb = async ({\n  name = defaultConnectionName,\n}: DbNameOption) => {\n  await closeDb({ name });\n  return window.localforage?.removeItem(name);\n};\n\nexport const loadDbFromFile = async ({\n  name = defaultConnectionName,\n  entities = defaultEntities,\n  database,\n}: DbLoadingOption) => {\n  const connection = await connectDb({ name, entities });\n  await connection.sqljsManager.loadDatabase(database);\n  return connection;\n};\n\nexport const createDbUrl = async ({\n  name = defaultConnectionName,\n}: DbNameOption) => {\n  const connection = getConnection(name);\n  const arrayBuffer = connection.sqljsManager.exportDatabase();\n  const blob = new Blob([arrayBuffer], {\n    type: 'application/octet-stream',\n  });\n  const dbUrl = URL.createObjectURL(blob);\n\n  return dbUrl;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAMA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAQA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAYA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAZA;AAAA;AACA;AADA;AAuBA;AACA;AACA;AACA;AA1BA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AANA;AAKA;AALA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AADA;AAGA;AARA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}